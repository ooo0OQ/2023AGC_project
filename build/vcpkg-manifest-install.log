Detecting compiler hash for triplet x64-windows...
-- Automatically setting %HTTP(S)_PROXY% environment variables to "127.0.0.1:7890".
All requested packages are currently installed.
Total install time: 100 ns
abseil provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(absl CONFIG REQUIRED)
  # note: 174 additional targets are not displayed.
  target_link_libraries(main PRIVATE absl::any absl::log absl::base absl::bits)

freetype is compatible with built-in CMake targets:

    find_package(Freetype REQUIRED)
    target_link_libraries(main PRIVATE Freetype::Freetype) # since CMake 3.10

glfw3 provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(glfw3 CONFIG REQUIRED)
  target_link_libraries(main PRIVATE glfw)

glm provides CMake targets:

    find_package(glm CONFIG REQUIRED)
    target_link_libraries(main PRIVATE glm::glm)

glslang provides CMake targets:

    find_package(glslang CONFIG REQUIRED)
    target_link_libraries(main PRIVATE glslang::OSDependent glslang::glslang glslang::MachineIndependent glslang::GenericCodeGen glslang::glslang-default-resource-limits glslang::OGLCompiler glslang::SPVRemapper glslang::SPIRV glslang::HLSL)

The package gtest is compatible with built-in CMake targets:

    enable_testing()
    
    find_package(GTest CONFIG REQUIRED)
    target_link_libraries(main PRIVATE GTest::gtest GTest::gtest_main GTest::gmock GTest::gmock_main)
    
    add_test(AllTestsInMain main)

imgui provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(imgui CONFIG REQUIRED)
  target_link_libraries(main PRIVATE imgui::imgui)

The package stb provides CMake targets:

    find_package(Stb REQUIRED)
    target_include_directories(main PRIVATE ${Stb_INCLUDE_DIR})
The package sfml provides CMake targets:

    find_package(SFML COMPONENTS system window graphics CONFIG REQUIRED)
    target_link_libraries(main PRIVATE sfml-system sfml-network sfml-graphics sfml-window)

    # If you want SFML to provide an implementation of main():
    target_link_libraries(main PRIVATE sfml-main)

The package spdlog provides CMake targets:

    find_package(spdlog CONFIG REQUIRED)
    target_link_libraries(main PRIVATE spdlog::spdlog)

    # Or use the header-only version
    find_package(spdlog CONFIG REQUIRED)
    target_link_libraries(main PRIVATE spdlog::spdlog_header_only)

VulkanMemoryAllocator provides official find_package support. However, it requires the user to provide the include directory containing `vulkan/vulkan.h`. There are multiple ways to achieve this and VulkanMemoryAllocator is compatible with all of them.

    find_package(Vulkan) # https://cmake.org/cmake/help/latest/module/FindVulkan.html, CMake 3.21+
    find_package(VulkanMemoryAllocator CONFIG REQUIRED)
    target_link_libraries(main PRIVATE Vulkan::Vulkan GPUOpen::VulkanMemoryAllocator)

or

    find_package(Vulkan) # CMake 3.21+
    find_package(VulkanMemoryAllocator CONFIG REQUIRED)
    target_link_libraries(main PRIVATE Vulkan::Headers GPUOpen::VulkanMemoryAllocator)

or

    find_package(VulkanHeaders CONFIG) # From the vulkan-headers port
    find_package(VulkanMemoryAllocator CONFIG REQUIRED)
    target_link_libraries(main PRIVATE Vulkan::Headers GPUOpen::VulkanMemoryAllocator)

See the documentation for more information on setting up your project: https://gpuopen-librariesandsdks.github.io/VulkanMemoryAllocator/html/index.html

